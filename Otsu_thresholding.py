import numpy as np
import cv2
import math
import matplotlib.pyplot as plt

img_name = input("Please input the image name you want to thresholding: ")
img_color = cv2.imread(img_name)
img_gray = cv2.cvtColor(img_color, cv2.COLOR_BGR2GRAY)
histr_gray = cv2.calcHist([img_gray], [0], None, [256], [0, 256])
plt.xlim([0, 256])
plt.hist(img_gray.ravel(), 256, [0, 256])
plt.title("Orginal gray values histogram")
plt.show()

## initialize values
prob = np.zeros(256)
total = img_gray.size
img_shape = img_gray.shape
hight = img_shape[0]
width = img_shape[1]

## Calculate the probability of each gray level
for i in range(256):
    prob[i] = histr_gray[i] / total

## Calculate a(t), b(t), m, m(t)
a = np.zeros(256)
b = np.zeros(256)
m_a = np.zeros(256)
m = 0
for i in range(256):
    m += i * prob[i]
for t in range(256):
    for i in range(t + 1):
        a[t] += prob[i]
    for i in range(t + 1, 256):
        b[t] += prob[i]
    for i in range(t + 1):
        m_a[t] += i * prob[i]

## find max_t s.t. the func value is the maximum
max_t = 0
max_value = 0
for t in range(256):
    if a[t] * b[t] > 0:
        func_value = (m_a[t] - m * a[t]) ** 2 / (a[t] * b[t])
        if max_value < func_value:
            max_value = func_value
            max_t = t
# print(a)
# print(b)
print(max_t)

## Reset gray values of the gray image
for i in range(hight):
    for j in range(width):
        if img_gray[i][j] >= max_t:
            img_gray[i][j] = 255
        else:
            img_gray[i][j] = 0


## Show the result
cv2.imwrite("Otsu-thresholding" + img_name, img_gray)
plt.xlim([0, 256])
plt.hist(img_gray.ravel(), 256, [0, 256])
plt.title("Gray image generated by Otsu thresholding")
plt.show()
cv2.imshow("Image generated by Otsu thresholding", img_gray)

cv2.waitKey(0)
cv2.destroyAllWindows()
